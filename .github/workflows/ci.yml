name: üîß Continuous Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  # Security and dependency scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.actor != 'dependabot[bot]'
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload security scan results as artifact (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ github.sha }}
          path: trivy-results.sarif
          retention-days: 30

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Audit dependencies
        run: pnpm audit --audit-level moderate

  # Code quality and linting
  lint:
    name: üßπ Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint

      - name: Check code formatting
        run: pnpm run format --check

  # Backend tests
  test-backend:
    name: üß™ Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run backend unit tests
        run: pnpm run test:backend
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: test_db
          NODE_ENV: test

      - name: Run backend e2e tests
        working-directory: backend
        run: pnpm run test:e2e
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: test_db
          NODE_ENV: test

  # Build validation
  build:
    name: üèóÔ∏è Build Validation
    runs-on: ubuntu-latest
    needs: [security, lint]
    strategy:
      matrix:
        target: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.target }}
        run: pnpm run build:${{ matrix.target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}-${{ github.sha }}
          path: |
            ${{ matrix.target }}/dist/
            ${{ matrix.target }}/.next/
          retention-days: 7

  # Docker build and security scan
  docker:
    name: üê≥ Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: persona-job-assistant:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: persona-job-assistant:${{ github.sha }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.actor != 'dependabot[bot]'
        with:
          sarif_file: 'docker-trivy-results.sarif'
        continue-on-error: true

      - name: Upload Docker scan results as artifact (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-scan-results-${{ github.sha }}
          path: docker-trivy-results.sarif
          retention-days: 30

  # Summary job
  ci-success:
    name: ‚úÖ CI Success
    runs-on: ubuntu-latest
    needs: [security, lint, test-backend, build, docker]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.security.result }}" != "success" || 
                "${{ needs.lint.result }}" != "success" || 
                "${{ needs.test-backend.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.docker.result }}" != "success" ]]; then
            echo "‚ùå CI pipeline failed"
            exit 1
          else
            echo "‚úÖ CI pipeline completed successfully"
          fi 