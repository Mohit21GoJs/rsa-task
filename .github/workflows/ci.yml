name: 🔧 Continuous Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9.x'
  FORCE_COLOR: 3

jobs:
  # Setup and change detection
  setup:
    name: 🚀 Setup & Change Detection
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            frontend:
              - 'frontend/**'
              - 'package.json'
              - 'pnpm-lock.yaml'

  # Code quality and linting
  lint:
    name: 🧹 Lint & Format
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Lint code
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format --check

  # Build validation
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        target: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Build ${{ matrix.target }}
        run: pnpm run build:${{ matrix.target }}

  # Backend tests
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.backend-changed == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Wait for services
        run: |
          npx wait-on tcp:localhost:5432 -t 30000
          npx wait-on tcp:localhost:6379 -t 30000

      - name: Run backend tests
        working-directory: backend
        run: pnpm run test
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

  # Frontend tests
  test-frontend:
    name: 🎭 Frontend Tests
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.frontend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run frontend tests
        working-directory: frontend
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            pnpm run test
          else
            echo "⚠️ No test script found in frontend package.json"
          fi

  # CI completion check
  ci-success:
    name: ✅ CI Complete
    runs-on: ubuntu-latest
    needs: [lint, build, test-backend, test-frontend]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          
          # Lint
          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ Lint & Format: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Lint & Format: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Tests
          backend_status="${{ needs.test-backend.result }}"
          frontend_status="${{ needs.test-frontend.result }}"
          
          if [[ "$backend_status" == "success" || "$backend_status" == "skipped" ]]; then
            echo "✅ Backend Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$frontend_status" == "success" || "$frontend_status" == "skipped" ]]; then
            echo "✅ Frontend Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                ("${{ needs.test-backend.result }}" != "success" && "${{ needs.test-backend.result }}" != "skipped") || 
                ("${{ needs.test-frontend.result }}" != "success" && "${{ needs.test-frontend.result }}" != "skipped") ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CI pipeline failed** - Please review the failed jobs above" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All CI checks passed!** Ready for deployment 🚀" >> $GITHUB_STEP_SUMMARY
          fi 