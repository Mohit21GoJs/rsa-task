name: 🔐 Security & Compliance

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
    paths:
      - '**/package.json'
      - '**/pnpm-lock.yaml'
      - '**/Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/package.json'
      - '**/pnpm-lock.yaml'
      - '**/Dockerfile*'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - containers
          - infrastructure

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9.x'

jobs:
  # Comprehensive secret scanning
  secret-scan:
    name: 🕵️ Secret Detection
    runs-on: ubuntu-latest
    if: inputs.scan_type == 'full' || inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload secret scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results-${{ github.sha }}
          path: |
            gitleaks-report.json
            trufflehog-results.json
          retention-days: 30

  # Dependency vulnerability scanning
  dependency-scan:
    name: 📦 Dependency Security
    runs-on: ubuntu-latest
    if: inputs.scan_type == 'full' || inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        workspace: ['.', 'backend', 'frontend']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: ${{ matrix.workspace }}
        run: |
          if [ -f "package.json" ]; then
            pnpm install --frozen-lockfile
          fi

      - name: Run npm audit
        working-directory: ${{ matrix.workspace }}
        continue-on-error: true
        run: |
          if [ -f "package.json" ]; then
            echo "## 🔍 NPM Audit Results - ${{ matrix.workspace }}" >> $GITHUB_STEP_SUMMARY
            if ! pnpm audit --audit-level moderate --json > audit-${{ matrix.workspace }}.json; then
              echo "⚠️ Vulnerabilities found in ${{ matrix.workspace }}" >> $GITHUB_STEP_SUMMARY
              pnpm audit --audit-level moderate >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No significant vulnerabilities found in ${{ matrix.workspace }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=${{ matrix.workspace }}/package.json --sarif-file-output=snyk-${{ matrix.workspace }}.sarif

      - name: Upload Snyk results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-${{ matrix.workspace }}.sarif
        continue-on-error: true

      - name: Check for outdated dependencies
        working-directory: ${{ matrix.workspace }}
        run: |
          if [ -f "package.json" ]; then
            echo "## 📅 Outdated Dependencies - ${{ matrix.workspace }}" >> $GITHUB_STEP_SUMMARY
            outdated=$(pnpm outdated --format json || echo "[]")
            if [ "$outdated" != "[]" ]; then
              echo "⚠️ Outdated packages found:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              echo "$outdated" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ All dependencies are up to date" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  # Container security scanning
  container-scan:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    if: inputs.scan_type == 'full' || inputs.scan_type == 'containers' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        dockerfile: ['Dockerfile', 'Dockerfile.frontend', 'Dockerfile.worker']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: false
          tags: security-test:${{ matrix.dockerfile }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-test:${{ matrix.dockerfile }}
          format: 'sarif'
          output: 'trivy-${{ matrix.dockerfile }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.dockerfile }}.sarif'
        continue-on-error: true

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          format: sarif
          output-file: hadolint-${{ matrix.dockerfile }}.sarif

      - name: Upload Hadolint results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-${{ matrix.dockerfile }}.sarif
        continue-on-error: true

  # Infrastructure security scanning
  infrastructure-scan:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest
    if: inputs.scan_type == 'full' || inputs.scan_type == 'infrastructure' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif
        continue-on-error: true

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_dir: 'infrastructure'
          policy_type: 'all'
          only_warn: true
          sarif_upload: true

  # Code quality security scanning
  code-security:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    if: inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch'
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for analysis
        run: |
          pnpm run build:backend
          pnpm run build:frontend

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/ci
            p/owasp-top-ten
            p/dockerfile
          generateSarif: "1"

      - name: Upload Semgrep results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        continue-on-error: true

  # License compliance checking
  license-compliance:
    name: 📋 License Compliance
    runs-on: ubuntu-latest
    if: inputs.scan_type == 'full' || inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          echo "## 📋 License Compliance Report" >> $GITHUB_STEP_SUMMARY
          
          # Generate license report
          pnpm licenses list --long --json > licenses.json
          
          # Check for problematic licenses
          problematic_licenses=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
          found_issues=false
          
          for license in "${problematic_licenses[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "⚠️ Found potentially problematic license: $license" >> $GITHUB_STEP_SUMMARY
              found_issues=true
            fi
          done
          
          if [ "$found_issues" = false ]; then
            echo "✅ No problematic licenses detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Count total packages
          total_packages=$(pnpm list --depth=0 --json | jq '.dependencies | length')
          echo "📦 Total packages analyzed: $total_packages" >> $GITHUB_STEP_SUMMARY

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report-${{ github.sha }}
          path: licenses.json
          retention-days: 30

  # Security policy enforcement
  security-policy:
    name: 🛡️ Security Policy Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy compliance
        run: |
          echo "## 🛡️ Security Policy Compliance" >> $GITHUB_STEP_SUMMARY
          
          # Check for required security files
          security_files=("SECURITY.md" ".github/SECURITY.md" "docs/SECURITY.md")
          found_security_policy=false
          
          for file in "${security_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Security policy found: $file" >> $GITHUB_STEP_SUMMARY
              found_security_policy=true
              break
            fi
          done
          
          if [ "$found_security_policy" = false ]; then
            echo "⚠️ No security policy found. Consider adding SECURITY.md" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for dependabot configuration
          if [ -f ".github/dependabot.yml" ]; then
            echo "✅ Dependabot configuration found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No Dependabot configuration found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for CodeQL configuration
          if [ -f ".github/workflows/codeql.yml" ] || grep -q "codeql" .github/workflows/*.yml; then
            echo "✅ CodeQL scanning configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ CodeQL scanning not found in workflows" >> $GITHUB_STEP_SUMMARY
          fi

  # Security report generation
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, container-scan, infrastructure-scan, code-security, license-compliance]
    if: always() && (inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch')
    steps:
      - name: Generate security summary
        run: |
          echo "## 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Secret scanning
          if [ "${{ needs.secret-scan.result }}" = "success" ]; then
            echo "✅ **Secret Detection**: No secrets found" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.secret-scan.result }}" = "failure" ]; then
            echo "❌ **Secret Detection**: Potential secrets detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Secret Detection**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Dependency scanning
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "✅ **Dependency Security**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.dependency-scan.result }}" = "failure" ]; then
            echo "❌ **Dependency Security**: Vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Dependency Security**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Container scanning
          if [ "${{ needs.container-scan.result }}" = "success" ]; then
            echo "✅ **Container Security**: No critical issues" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.container-scan.result }}" = "failure" ]; then
            echo "❌ **Container Security**: Issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Container Security**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Infrastructure scanning
          if [ "${{ needs.infrastructure-scan.result }}" = "success" ]; then
            echo "✅ **Infrastructure Security**: No critical issues" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.infrastructure-scan.result }}" = "failure" ]; then
            echo "❌ **Infrastructure Security**: Issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Infrastructure Security**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Code security
          if [ "${{ needs.code-security.result }}" = "success" ]; then
            echo "✅ **Code Security**: No critical issues" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.code-security.result }}" = "failure" ]; then
            echo "❌ **Code Security**: Issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Code Security**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # License compliance
          if [ "${{ needs.license-compliance.result }}" = "success" ]; then
            echo "✅ **License Compliance**: No problematic licenses" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.license-compliance.result }}" = "failure" ]; then
            echo "❌ **License Compliance**: Problematic licenses found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **License Compliance**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any failed security scans above" >> $GITHUB_STEP_SUMMARY
          echo "2. Check the Security tab for detailed findings" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies with security vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "4. Review and approve any security policy changes" >> $GITHUB_STEP_SUMMARY

      - name: Create security issue if failures detected
        if: needs.secret-scan.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.container-scan.result == 'failure' || needs.infrastructure-scan.result == 'failure' || needs.code-security.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔐 Security Scan Issues Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Results
            
            One or more security scans have detected issues that require attention.
            
            ### Failed Scans:
            ${context.payload.inputs?.scan_type !== 'full' ? `- Scan Type: ${context.payload.inputs.scan_type}` : '- Full security scan'}
            
            ### Actions Required:
            1. Review the Security tab for detailed findings
            2. Check the workflow run: ${context.payload.repository.html_url}/actions/runs/${context.runId}
            3. Address any critical or high-severity issues
            4. Update dependencies with known vulnerabilities
            
            ### Scan Results:
            - Secret Detection: ${{ needs.secret-scan.result }}
            - Dependency Security: ${{ needs.dependency-scan.result }}
            - Container Security: ${{ needs.container-scan.result }}
            - Infrastructure Security: ${{ needs.infrastructure-scan.result }}
            - Code Security: ${{ needs.code-security.result }}
            
            This issue was automatically created by the security workflow.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated']
            }); 