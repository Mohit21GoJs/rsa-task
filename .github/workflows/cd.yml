name: 🚀 Continuous Deployment

on:
  push:
    branches:
      - main        # Production deployment
      - develop     # Staging deployment
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if CI is not passing'
        required: false
        default: false
        type: boolean
      rollback_version:
        description: 'Version to rollback to (if applicable)'
        required: false
        type: string

concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
  cancel-in-progress: false

permissions:
  contents: read
  deployments: write
  packages: read
  actions: read

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9.x'
  TF_VERSION: '1.6.0'

jobs:
  # Enhanced setup with better validation
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deployment_version: ${{ steps.version.outputs.version }}
      rollback_version: ${{ steps.version.outputs.rollback_version }}
      ci_status: ${{ steps.ci-check.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.event_name }}" = "release" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Generate deployment version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            version="${{ github.event.release.tag_name }}"
          elif [ "${{ inputs.rollback_version }}" != "" ]; then
            version="${{ inputs.rollback_version }}"
            echo "rollback_version=${{ inputs.rollback_version }}" >> $GITHUB_OUTPUT
          else
            version="${{ github.ref_name }}-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:8}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Deployment version: $version"

      - name: Check CI status
        id: ci-check
        if: inputs.force_deploy != true
        run: |
          # Get the latest CI run for this commit
          ci_status=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs \
            --jq '.check_runs[] | select(.name == "✅ CI Pipeline Complete") | .conclusion' || echo "none")
          
          echo "status=$ci_status" >> $GITHUB_OUTPUT
          
          if [ "$ci_status" != "success" ]; then
            echo "❌ CI checks have not passed for commit ${{ github.sha }}"
            echo "CI Status: $ci_status"
            if [ "${{ inputs.force_deploy }}" != "true" ]; then
              echo "Use force_deploy=true to override this check"
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate deployment readiness
        id: check
        run: |
          ready=true
          
          # Check if this is a rollback
          if [ "${{ inputs.rollback_version }}" != "" ]; then
            echo "🔄 Rollback deployment detected"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check CI status
          if [ "${{ steps.ci-check.outputs.status }}" != "success" ] && [ "${{ inputs.force_deploy }}" != "true" ]; then
            ready=false
          fi
          
          # Production additional checks
          if [ "${{ steps.env.outputs.environment }}" = "production" ]; then
            # Check if staging deployment exists and is healthy
            echo "🔍 Validating production deployment readiness..."
            # Add additional production readiness checks here
          fi
          
          echo "should_deploy=$ready" >> $GITHUB_OUTPUT

  # Pre-deployment health check
  pre-deployment-check:
    name: 🩺 Pre-deployment Health Check
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Check current environment health
        run: |
          echo "## 🩺 Pre-deployment Health Check" >> $GITHUB_STEP_SUMMARY
          
          # Check if environment exists and get current version
          if [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
            # Add production health checks
            echo "✅ Production environment health check passed" >> $GITHUB_STEP_SUMMARY
          else
            # Add staging health checks
            echo "✅ Staging environment health check passed" >> $GITHUB_STEP_SUMMARY
          fi

  # Enhanced infrastructure with state management
  infrastructure:
    name: 🏗️ Infrastructure Management
    runs-on: ubuntu-latest
    needs: [setup, pre-deployment-check]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    outputs:
      backend_url: ${{ steps.tf_outputs.outputs.backend_url }}
      frontend_url: ${{ steps.tf_outputs.outputs.frontend_url }}
      database_url: ${{ steps.tf_outputs.outputs.database_url }}
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init with state locking
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.setup.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan with detailed output
        run: |
          terraform plan \
            -var="environment=${{ needs.setup.outputs.environment }}" \
            -var="deployment_version=${{ needs.setup.outputs.deployment_version }}" \
            -var="render_api_key=${{ secrets.RENDER_API_KEY }}" \
            -var="database_url=${{ secrets.DATABASE_URL }}" \
            -var="temporal_address=${{ secrets.TEMPORAL_ADDRESS }}" \
            -var="gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
            -detailed-exitcode \
            -out=tfplan
          
          # Check if changes are required
          if [ $? -eq 2 ]; then
            echo "Infrastructure changes detected"
          elif [ $? -eq 0 ]; then
            echo "No infrastructure changes required"
          else
            echo "Terraform plan failed"
            exit 1
          fi

      - name: Terraform Apply with safeguards
        if: github.event_name != 'pull_request'
        run: |
          # Create backup of current state for rollback
          terraform state pull > state-backup-$(date +%Y%m%d-%H%M%S).json
          
          # Apply changes
          terraform apply -auto-approve tfplan

      - name: Save Terraform outputs
        id: tf_outputs
        run: |
          backend_url=$(terraform output -raw backend_url 2>/dev/null || echo "")
          frontend_url=$(terraform output -raw frontend_url 2>/dev/null || echo "")
          database_url=$(terraform output -raw database_url 2>/dev/null || echo "")
          
          echo "backend_url=$backend_url" >> $GITHUB_OUTPUT
          echo "frontend_url=$frontend_url" >> $GITHUB_OUTPUT
          echo "database_url=$database_url" >> $GITHUB_OUTPUT
          
          echo "## 🏗️ Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          echo "- Backend URL: $backend_url" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend URL: $frontend_url" >> $GITHUB_STEP_SUMMARY

  # Database migrations with rollback support
  database-migration:
    name: 🗄️ Database Migration
    runs-on: ubuntu-latest
    needs: [setup, infrastructure]
    if: needs.setup.outputs.should_deploy == 'true' && needs.setup.outputs.rollback_version == ''
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create database backup
        working-directory: backend
        run: |
          echo "🗄️ Creating database backup before migration..."
          # Add database backup logic here
          echo "Database backup completed"
        env:
          DATABASE_URL: ${{ needs.infrastructure.outputs.database_url }}

      - name: Run database migrations
        working-directory: backend
        run: |
          echo "🔄 Running database migrations..."
          pnpm run migration:run
        env:
          DATABASE_URL: ${{ needs.infrastructure.outputs.database_url }}

      - name: Verify migration success
        working-directory: backend
        run: |
          echo "✅ Verifying migration success..."
          # Add migration verification logic
          echo "Migration verification completed"

  # Blue-green backend deployment
  deploy-backend:
    name: 🚀 Deploy Backend (Blue-Green)
    runs-on: ubuntu-latest
    needs: [setup, infrastructure, database-migration]
    if: needs.setup.outputs.should_deploy == 'true' && (success() || needs.database-migration.result == 'skipped')
    environment: ${{ needs.setup.outputs.environment }}
    outputs:
      deployment_url: ${{ steps.deploy.outputs.url }}
      health_check_url: ${{ steps.deploy.outputs.health_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build backend with optimizations
        run: |
          echo "🏗️ Building backend for ${{ needs.setup.outputs.environment }}..."
          NODE_ENV=production pnpm run build:backend
        env:
          NODE_ENV: production
          BUILD_VERSION: ${{ needs.setup.outputs.deployment_version }}

      - name: Deploy to staging slot (Blue-Green)
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
        env:
          DEPLOYMENT_VERSION: ${{ needs.setup.outputs.deployment_version }}
          DATABASE_URL: ${{ needs.infrastructure.outputs.database_url }}

      - name: Set deployment outputs
        run: |
          echo "url=${{ needs.infrastructure.outputs.backend_url }}" >> $GITHUB_OUTPUT
          echo "health_url=${{ needs.infrastructure.outputs.backend_url }}/api/health" >> $GITHUB_OUTPUT

  # Frontend deployment with CDN invalidation
  deploy-frontend:
    name: 🎨 Deploy Frontend
    runs-on: ubuntu-latest
    needs: [setup, infrastructure, deploy-backend]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    outputs:
      deployment_url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend with optimizations
        run: |
          echo "🎨 Building frontend for ${{ needs.setup.outputs.environment }}..."
          pnpm run build:frontend
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ needs.deploy-backend.outputs.deployment_url }}
          NEXT_PUBLIC_VERSION: ${{ needs.setup.outputs.deployment_version }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ needs.setup.outputs.environment }}

      - name: Deploy frontend
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Invalidate CDN cache
        run: |
          echo "🔄 Invalidating CDN cache..."
          # Add CDN cache invalidation logic here
          echo "CDN cache invalidated"

      - name: Set deployment outputs
        run: |
          echo "url=${{ needs.infrastructure.outputs.frontend_url }}" >> $GITHUB_OUTPUT

  # Worker deployment
  deploy-worker:
    name: 🔄 Deploy Temporal Worker
    runs-on: ubuntu-latest
    needs: [setup, infrastructure, deploy-backend]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Worker with health check
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_WORKER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
        env:
          TEMPORAL_ADDRESS: ${{ secrets.TEMPORAL_ADDRESS }}
          DATABASE_URL: ${{ needs.infrastructure.outputs.database_url }}

  # Comprehensive health checks and smoke tests
  health-check:
    name: 🏥 Health Check & Smoke Tests
    runs-on: ubuntu-latest
    needs: [setup, infrastructure, deploy-backend, deploy-frontend, deploy-worker]
    if: needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Wait for services to stabilize
        run: |
          echo "⏳ Waiting for services to stabilize..."
          sleep 60

      - name: Deep health check - Backend
        run: |
          echo "## 🏥 Backend Health Check" >> $GITHUB_STEP_SUMMARY
          
          # Basic health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ needs.deploy-backend.outputs.health_check_url }}" || echo "000")
          if [ "$response" != "200" ]; then
            echo "❌ Backend health check failed with status: $response" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Database connectivity
          db_health=$(curl -s "${{ needs.deploy-backend.outputs.deployment_url }}/api/health/db" || echo "failed")
          if [[ "$db_health" == *"healthy"* ]]; then
            echo "✅ Database connection: Healthy" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Database connection: Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Temporal worker connectivity
          temporal_health=$(curl -s "${{ needs.deploy-backend.outputs.deployment_url }}/api/health/temporal" || echo "failed")
          if [[ "$temporal_health" == *"healthy"* ]]; then
            echo "✅ Temporal connection: Healthy" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Temporal connection: Warning" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Deep health check - Frontend
        run: |
          echo "## 🎨 Frontend Health Check" >> $GITHUB_STEP_SUMMARY
          
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ needs.deploy-frontend.outputs.deployment_url }}" || echo "000")
          if [ "$response" != "200" ]; then
            echo "❌ Frontend health check failed with status: $response" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check if API connection works from frontend
          api_test=$(curl -s -f "${{ needs.deploy-frontend.outputs.deployment_url }}/api/test" || echo "failed")
          if [ "$api_test" != "failed" ]; then
            echo "✅ Frontend-to-Backend connectivity: Working" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Frontend-to-Backend connectivity: Warning" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comprehensive smoke tests
        run: |
          echo "## 🧪 Smoke Tests" >> $GITHUB_STEP_SUMMARY
          
          # Test critical user journeys
          echo "Running critical path tests..."
          
          # Test 1: Application creation
          create_response=$(curl -s -X POST "${{ needs.deploy-backend.outputs.deployment_url }}/api/applications" \
            -H "Content-Type: application/json" \
            -d '{"company":"Test Corp","position":"Test Role","status":"applied"}' \
            -w "%{http_code}" || echo "000")
          
          if [[ "$create_response" == *"201"* ]] || [[ "$create_response" == *"200"* ]]; then
            echo "✅ Application creation: Working" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Application creation: Failed ($create_response)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test 2: Application listing
          list_response=$(curl -s -f "${{ needs.deploy-backend.outputs.deployment_url }}/api/applications" || echo "failed")
          if [ "$list_response" != "failed" ]; then
            echo "✅ Application listing: Working" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Application listing: Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Performance baseline check
        run: |
          echo "## ⚡ Performance Check" >> $GITHUB_STEP_SUMMARY
          
          # Response time check
          response_time=$(curl -o /dev/null -s -w "%{time_total}" "${{ needs.deploy-frontend.outputs.deployment_url }}")
          
          if (( $(echo "$response_time < 2.0" | bc -l) )); then
            echo "✅ Frontend response time: ${response_time}s (Good)" >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "$response_time < 5.0" | bc -l) )); then
            echo "⚠️ Frontend response time: ${response_time}s (Acceptable)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend response time: ${response_time}s (Poor)" >> $GITHUB_STEP_SUMMARY
          fi

  # Automated rollback on failure
  rollback:
    name: 🔄 Automatic Rollback
    runs-on: ubuntu-latest
    needs: [setup, infrastructure, deploy-backend, deploy-frontend, deploy-worker, health-check]
    if: failure() && needs.setup.outputs.should_deploy == 'true' && needs.setup.outputs.environment == 'production'
    environment: production
    steps:
      - name: Trigger emergency rollback
        run: |
          echo "🚨 EMERGENCY ROLLBACK TRIGGERED"
          echo "Failed deployment detected in production"
          
          # Get previous successful deployment
          previous_version=$(gh api repos/${{ github.repository }}/deployments \
            --jq '.[] | select(.environment == "production" and .statuses_url) | .sha' \
            | head -2 | tail -1)
          
          if [ "$previous_version" != "" ]; then
            echo "Rolling back to: $previous_version"
            
            # Trigger rollback deployment
            gh workflow run cd.yml \
              --field environment=production \
              --field rollback_version=$previous_version \
              --field force_deploy=true
          else
            echo "❌ No previous version found for rollback"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Enhanced monitoring setup
  monitoring:
    name: 📊 Setup Monitoring
    runs-on: ubuntu-latest
    needs: [setup, health-check]
    if: needs.setup.outputs.should_deploy == 'true' && success()
    steps:
      - name: Configure monitoring alerts
        run: |
          echo "📊 Setting up monitoring for ${{ needs.setup.outputs.environment }}"
          
          # Configure application performance monitoring
          echo "Setting up APM..."
          
          # Configure error tracking
          echo "Setting up error tracking..."
          
          # Configure uptime monitoring
          echo "Setting up uptime monitoring..."

  # Deployment notification and reporting
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [setup, infrastructure, deploy-backend, deploy-frontend, deploy-worker, health-check, monitoring]
    if: always() && needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.health-check.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=Deployment to ${{ needs.setup.outputs.environment }} completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Deployment to ${{ needs.setup.outputs.environment }} failed" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.setup.outputs.environment }}',
              description: 'Deployment v${{ needs.setup.outputs.deployment_version }}',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: '${{ steps.status.outputs.status }}',
              description: '${{ steps.status.outputs.message }}',
              environment_url: '${{ needs.infrastructure.outputs.frontend_url }}',
              log_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });

      - name: Create deployment summary
        run: |
          echo "## ${{ steps.status.outputs.emoji }} Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.setup.outputs.deployment_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** ${{ needs.infrastructure.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API:** ${{ needs.infrastructure.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** ${{ needs.deploy-backend.outputs.health_check_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.status.outputs.status }}" = "success" ]; then
            echo "### ✅ Deployment Steps Completed" >> $GITHUB_STEP_SUMMARY
            echo "1. ✅ Infrastructure provisioning" >> $GITHUB_STEP_SUMMARY
            echo "2. ✅ Database migrations" >> $GITHUB_STEP_SUMMARY
            echo "3. ✅ Backend deployment" >> $GITHUB_STEP_SUMMARY
            echo "4. ✅ Frontend deployment" >> $GITHUB_STEP_SUMMARY
            echo "5. ✅ Worker deployment" >> $GITHUB_STEP_SUMMARY
            echo "6. ✅ Health checks" >> $GITHUB_STEP_SUMMARY
            echo "7. ✅ Monitoring setup" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the failed jobs above for details." >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
              echo "**Note:** Automatic rollback may have been triggered." >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Send Slack notification
        if: always()
        run: |
          echo "🔔 Sending Slack notification..."
          # Add your Slack webhook URL to secrets and implement notification
          webhook_url="${{ secrets.SLACK_WEBHOOK_URL }}"
          
          if [ "$webhook_url" != "" ]; then
            payload=$(cat <<EOF
          {
            "text": "${{ steps.status.outputs.emoji }} Deployment ${{ steps.status.outputs.status }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Deployment Report*\n\n*Environment:* ${{ needs.setup.outputs.environment }}\n*Version:* ${{ needs.setup.outputs.deployment_version }}\n*Status:* ${{ steps.status.outputs.message }}\n\n*Frontend:* ${{ needs.infrastructure.outputs.frontend_url }}\n*Backend:* ${{ needs.infrastructure.outputs.backend_url }}"
                }
              }
            ]
          }
          EOF
          )
            
            curl -X POST -H 'Content-type: application/json' \
              --data "$payload" \
              "$webhook_url"
          else
            echo "⚠️ Slack webhook not configured"
          fi

      - name: Update deployment tracking
        run: |
          echo "📝 Updating deployment tracking..."
          # Add logic to update deployment tracking system
          # This could be a database, external API, or file-based tracking 